extends layout

block styles
    link(rel='stylesheet' href='/stylesheets/global.css')
    link(rel='stylesheet' href='/stylesheets/detail.css')
    link(rel='stylesheet' href='/stylesheets/content.css')
    link(rel='stylesheet' href='/stylesheets/delete.css')
    link(rel='stylesheet' href='/stylesheets/hero.css')
    link(rel='stylesheet' href='/stylesheets/form.css')

block content
    form(class="form" method="POST" action="" enctype="multipart/form-data")
        div(class="main")
            div(class="content main__content")
                h2(class="content__title")=title
                div(class="detail content__detail")
                    label(class="detail__image-container detail__image-container--bordered" for="picture")
                        if iteminstance && iteminstance.picture
                            span(class="detail__instructions")
                            img(class="detail__image" src=`/images/${item.picture.get("filename")}` alt=item.picture.get("originalname"))
                        else if iteminstance && iteminstance.item && iteminstance.item.picture
                            span(class="detail__instructions")
                            img(class="detail__image" src=`/images/${iteminstance.item.picture.get("filename")}` alt=iteminstance.item.picture.get("originalname"))
                        else
                            span(class="detail__instructions") Upload an image (PNG/JPG)
                            img(class="detail__image" src="")
                        input(class="detail__input" type="hidden" required name="picture" value = (iteminstance && iteminstance.picture) ? item.picture.get("originalname") : null)
                        input(class="detail__input detail__input--hidden" id="picture" type="file" max-file-size="10485760" accept="image/png, image/jpeg, /image/webp" value = (iteminstance && iteminstance.picture) ? false: true)
                    div(class="detail__details")
                        h2(class="detail__title")  #{iteminstance && iteminstance.id}
                        h3(class="detail__subtext")
                            label(class="detail__label" for='item') Item:
                            select(class="detail__select" id="item" name="item" required)
                                each item in item_list
                                    option(class="detail__option" value=item._id selected=((iteminstance && item._id.equals(iteminstance.item._id) && "selected"))) #{item.name}
                        h4(class="detail__bold") Size
                            select(id="size" name="size" class="detail__select" )
                                if item_list[0].size 
                                    each size, index in item_list[0].size.split("  ")
                                        option(class="detail__option" value=size selected=(iteminstance.size === size && "selected")) #{size}
                        h4(class="detail__bold") Condition
                            select(id="condition" name="condition" class="detail__select" required)
                                option(class="detail__option" value="New" selected=(iteminstance && iteminstance.condition === "New" && "selected")) New
                                option(class="detail__option" value="Open Box" selected=(iteminstance && iteminstance.condition === "Open box" && "selected")) Open Box
                                option(class="detail__option" value="Used" selected=(iteminstance && iteminstance.condition === "Used" && "selected")) Used
                                option(class="detail__option" value="Refurbished" selected=(iteminstance && iteminstance.condition === "Refurbished" && "selected")) Refurbished
                                option(class="detail__option" value="For parts or not working" selected=(iteminstance && iteminstance.condition === "For parts or not working" && "selected")) For parts or not working
                        h4(class="detail__bold") Available
                            select(id="available" name="available" class="detail__select" required="true")
                                option(class="detail__option" value="Yes" selected=(iteminstance && iteminstance.available === "Yes" && "selected")) Yes
                                option(class="detail__option" value="No" selected=(iteminstance&& iteminstance.available === "No" && "selected")) No
                        block item-info
                            div(class="detail__buttons")
                                button(class="detail__button" type="submit") Submit
                                a(class="detail__link detail__link--cancel" href=item ? item.url : "/item") Cancel
        if errors
            ul
                for error in errors
                    li!= error.msg

        if errors
            ul
                for error in errors
                    li!= error.msg

    script.
        const itemDropdown = document.querySelector("#item");

        let currentIndex = 0;

        itemDropdown.addEventListener("change", (event) => {

            const sizeDropdown = document.querySelector("#size");
            const itemList = !{JSON.stringify(item_list)};

            sizeDropdown.options.length = 0;
            currentIndex = itemDropdown.selectedIndex;

            const currentItem = itemList[currentIndex];

            let sizeIndex = 0;

            if(currentItem.size)  {
                const splitCurrentItemSize = currentItem.size.split("  ");
                while(sizeDropdown.options.length != splitCurrentItemSize.length) {
                    const option = document.createElement("option");
                    option.value = splitCurrentItemSize[sizeIndex];
                    option.textContent = splitCurrentItemSize[sizeIndex];
                    sizeIndex++;
                    sizeDropdown.append(option);
                }
            }
        })